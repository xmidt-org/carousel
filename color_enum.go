// Code generated by go-enum
// DO NOT EDIT!

package carousel

import (
	"fmt"
	"strings"
)

const (
	// Blue is a Color of type Blue.
	Blue Color = iota
	// Green is a Color of type Green.
	Green
)

const _ColorName = "bluegreen"

var _ColorNames = []string{
	_ColorName[0:4],
	_ColorName[4:9],
}

// ColorNames returns a list of possible string values of Color.
func ColorNames() []string {
	tmp := make([]string, len(_ColorNames))
	copy(tmp, _ColorNames)
	return tmp
}

var _ColorMap = map[Color]string{
	0: _ColorName[0:4],
	1: _ColorName[4:9],
}

// String implements the Stringer interface.
func (x Color) String() string {
	if str, ok := _ColorMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Color(%d)", x)
}

var _ColorValue = map[string]Color{
	_ColorName[0:4]: 0,
	_ColorName[4:9]: 1,
}

// ParseColor attempts to convert a string to a Color
func ParseColor(name string) (Color, error) {
	if x, ok := _ColorValue[name]; ok {
		return x, nil
	}
	return Color(0), fmt.Errorf("%s is not a valid Color, try [%s]", name, strings.Join(_ColorNames, ", "))
}

// MarshalText implements the text marshaller method
func (x Color) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Color) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseColor(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
